"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/3DhtAhVG6xq
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Rubik } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Issue, Commits } from "@/components/Tracker/types";
import { GithubIcon, PlusIcon, GitCommitVerticalIcon } from "./icons";
const getIssues = async () => {
  const response = await fetch(`/api/github/issues`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({}),
    next: { revalidate: 60 },
  });
  if (response.ok) {
    return response.json();
  }
};

const getCommits = async () => {
  const response = await fetch(`/api/github/commits`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({}),
    next: { revalidate: 60 },
  });
  if (response.ok) {
    return response.json();
  }
};

export default function Tracker() {
  const [issues, setIssues] = useState<Issue[]>([]);
  const [commits, setCommits] = useState<Commits[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      const fetchedIssues = await getIssues();
      const fetchedCommits = await getCommits();
      setIssues(fetchedIssues.issues);
      setCommits(fetchedCommits.commits);
    };

    fetchData();
  }, []);

  return (
    <div className="flex flex-col min-h-screen">
      <header className="bg-primary text-primary-foreground px-6 py-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <GithubIcon className="w-6 h-6" />
          <h1 className="text-xl font-semibold">Tracker</h1>
        </div>
      </header>
      <main className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-8 p-8">
        <section>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Open Issues / PRs</h2>
            <Link href={"https://github.com/subinoybiswas/AmiMoji/issues/new"}>
              <Button>
                <PlusIcon className="w-4 h-4 mr-2" />
                Create Issue
              </Button>
            </Link>
          </div>
          <div className="grid gap-4">
            {issues &&
              issues.map((issue: any) => (
                <Link href={issue.html_url} key={issue.url}>
                  <Card
                    key={issue.url}
                    className="hover:border-2 hover:border-blue-800 cursor-pointer"
                  >
                    <CardHeader>
                      <CardTitle>{issue.title}</CardTitle>
                    </CardHeader>
                    <CardFooter>
                      <Badge variant="secondary" className="text-xs">
                        {issue.state}
                      </Badge>
                    </CardFooter>
                  </Card>
                </Link>
              ))}
          </div>
        </section>
        <section>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Recent Commits</h2>
            <Link
              href={"https://github.com/subinoybiswas/AmiMoji/commits/main/"}
            >
              <Button>
                <GitCommitVerticalIcon className="w-4 h-4 mr-2" />
                View History
              </Button>
            </Link>
          </div>
          <div className="grid gap-4">
            {commits &&
              commits.map((commit: any) => (
                <Link href={commit.html_url} key={commit.sha}>
                  <Card className="hover:border-2 hover:border-blue-800 cursor-pointer">
                    <CardHeader>
                      <CardTitle>{commit.commit.message}</CardTitle>
                    </CardHeader>
                    <CardFooter className="flex items-center justify-between">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <GithubIcon className="w-4 h-4" />
                        <span>{commit.commit.author.name}</span>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {commit.commit.author.date}
                      </div>
                    </CardFooter>
                  </Card>
                </Link>
              ))}
          </div>
        </section>
      </main>
    </div>
  );
}
